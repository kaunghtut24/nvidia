import os
from dotenv import load_dotenv
import streamlit as st
import requests

# Step 1: Load environment variables from .env
load_dotenv()

# Step 2: Retrieve the NVIDIA API key from the environment variables
nvidia_api_key = os.getenv("NVIDIA_API_KEY")

if not nvidia_api_key:
    raise ValueError("NVIDIA_API_KEY environment variable is not set")

# Configuration
model = "nvidia/llama-3.1-nemotron-70b-instruct"
temperature = 0.5
top_p = 1
max_tokens = 1024
api_base = "https://integrate.api.nvidia.com/v1"

def generate_response(user_input, conversation_history):
    try:
        url = f"{api_base}/chat/completions"
        headers = {
            "Authorization": f"Bearer {nvidia_api_key}",
            "Content-Type": "application/json"
        }
        data = {
            "model": model,
            "messages": [{"role": "user", "content": user_input}],
            "temperature": temperature,
            "top_p": top_p,
            "max_tokens": max_tokens
        }

        response = requests.post(url, headers=headers, json=data)

        # Debugging: Print request and response details (Remove in production)
        print(f"Request URL: {url}")
        print(f"Request Headers: {headers}")
        print(f"Request Body: {data}")
        print(f"Response Status Code: {response.status_code}")
        print(f"Response Body: {response.text}")

        if response.status_code == 200:
            response_json = response.json()
            # Adjust based on NVIDIA's response structure
            response_text = response_json['choices'][0]['message']['content']
            return response_text
        elif response.status_code == 401:
            return "Authentication Error: Invalid API key or insufficient permissions."
        else:
            return f"Error occurred while processing your request: HTTP {response.status_code} - {response.text}"
    except Exception as e:
        return f"Error occurred while processing your request: {e}"

def send_message():
    user_input = st.session_state.user_input
    if user_input.lower() == 'quit':
        st.session_state.conversation_history = "Goodbye!"
        st.session_state.user_input_history = []
    elif validate_input(user_input):
        # Update Conversation History
        st.session_state.user_input_history.append("User: " + user_input)
        response = generate_response(user_input, "\n".join(st.session_state.user_input_history))
        st.session_state.user_input_history.append("LLaMA: " + response)
        st.session_state.conversation_history = "\n".join(st.session_state.user_input_history)
        
        # Error Handling: Check if response is an error message
        if response.startswith("Error occurred while processing your request:") or response.startswith("Authentication Error:"):
            st.error(response)
        else:
            st.write("LLaMA:", response)

    # Clear the input field
    st.session_state.user_input = ""

def validate_input(user_input):
    # Implement your validation logic here (e.g., check for specific keywords, length, etc.)
    return True

def main():
    # Initialize Session State for Conversation History
    if 'conversation_history' not in st.session_state:
        st.session_state.conversation_history = ""
    if 'user_input_history' not in st.session_state:
        st.session_state.user_input_history = []

    # Streamlit Interface
    st.title("NVIDIA LLaMA Chatbot")
    st.write("Welcome to the NVIDIA LLaMA Chatbot! Type 'quit' to exit the conversation.")

    # Input Text Box
    user_input = st.text_input("You:", value="", key="user_input")

    # Send Button with Callback
    st.button("Send", on_click=send_message)

    # Display Conversation History
    st.write("**Conversation History:**")
    st.write(st.session_state.conversation_history)

    # Security Improvement: Limit Conversation History Size
    if len(st.session_state.user_input_history) > 20:
        st.session_state.user_input_history = st.session_state.user_input_history[-20:]
        st.session_state.conversation_history = "\n".join(st.session_state.user_input_history)

if __name__ == "__main__":
    main()